from aiogram import types
from datetime import timedelta

import timetable_bot.keyboards as kb
import timetable_bot.utils as utils


TD = timedelta(hours=3)

async def send_hello(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    """
    await message.reply("–ü–†–ò–í–ï–¢, " + str(message.from_user.first_name) + " ü§óü§óü§ó",
        reply_markup=kb.smile_kb)
    await message.answer("\n–ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –º–µ–Ω—é, —Ç–∞–º –∫–æ–º–∞–Ω–¥—ã –≤—Å—è–∫–∏–µ. –Ω–æ –ø–æ–∫–∞ –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É:", 
        reply_markup=kb.group_sel_kb)


async def send_echo(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç —é–∑–µ—Ä–∞ (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å reply –∫–ª–∞–≤—ã smile_kb)
    """
    match message.text:
        case "—á—Ç–æ —â–∞—Å":
            await get_current_class(message)
        case "—á—Ç–æ —Å—ë–¥–Ω—è":
            await get_today_schedule(message)
        case "–≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É":
            await set_user_group(message)
        case "–Ω–µ–¥–µ–ª—è":
            await send_week_schedule(message)
        case _:
            await message.reply(message.from_user.first_name + " –≥–æ–≤–æ—Ä–∏—Ç: " + message.text + "\n–≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å:", reply_markup=kb.day_sel_kb)
    

async def send_week_schedule(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã —é–∑–µ—Ä–∞ 
    """
    group = await utils.get_user_group(message.from_user.id)
    result = await utils.get_week(group)
    await message.reply(result, reply_markup=kb.day_sel_kb)


async def get_day_schedule(message: types.Message):
    """
    –í—ã–¥–∞—ë—Ç –∫–ª–∞–≤—É —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /day (–Ω—É –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–∑ __init__)
    """
    await message.reply("–≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å.\n", reply_markup=kb.day_sel_kb)


async def get_current_class(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ (–∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–¥—ë—Ç)
    """
    group = await utils.get_user_group(message.from_user.id)
    result = await utils.get_current_class(group, message.date + TD)
    await message.reply(result)


async def get_today_schedule(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∏–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
    """
    group = await utils.get_user_group(message.from_user.id)
    result = await utils.get_today(group, message.date + TD)
    today = utils.weekday_from_date(message.date + TD)
    if group:
        await message.reply(result, reply_markup=kb.day_switch_kb(utils.weekday_to_weeknum(today)))
    else:
        await message.reply(result)


async def set_user_group(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    """
    result = "–≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:"
    await message.reply(result, reply_markup=kb.group_sel_kb)


async def get_user_group(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–π —é–∑–µ—Ä–∞
    """
    result = await utils.get_user_group_message(message.from_user.id)
    await message.reply(result)


async def del_me_from_db(message: types.Message):
    """
    –£–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–∞ –∏–∑ –±–¥
    """
    result = await utils.del_user_from_db(message.from_user.id)
    await message.reply(result)


# # callback handlers #
# async def handle_user_group(call: types.CallbackQuery):
#     """
#     –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã (–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—É)
#     """
#     res = await utils.set_user_group(call.from_user, call.data)
#     await call.message.answer(res, reply_markup=kb.smile_kb)
#     await call.answer()


# async def handle_day_select(call: types.CallbackQuery):
#     """
#     –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
#     """
#     group = await utils.get_user_group(call.from_user.id)
#     if not group:
#         await call.message.answer("–Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É:", reply_markup=kb.group_sel_kb)
#         await call.answer()
#     else:
#         day = utils.parse_sel_day_data(call.data)
#         result = await utils.get_day(group, day)
#         day_for_button = utils.weekday_to_weeknum(day)
#         try:
#             await call.message.edit_text(result, reply_markup=kb.day_switch_kb(day_for_button))
#         except:
#             logging.warning("same text, didn't edit")
#         await call.answer()


# async def handle_day_switch(call: types.CallbackQuery):
#     """
#     –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ã —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –¥–Ω—è –Ω–µ–¥–µ–ª–∏
#     """
#     group = await utils.get_user_group(call.from_user.id)
#     if not group:
#         await call.message.answer("–Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É:", reply_markup=kb.group_sel_kb)
#         await call.answer()
#     else:
#         new_day = utils.parse_day_switch_data(call.data)
#         if new_day == "menu":
#             try:
#                 await call.message.edit_text("–≤—ã–±–µ—Ä–∏ –¥–µ–Ω—å.\n", reply_markup=kb.day_sel_kb)
#             except:
#                 logging.warning("same text, didn't edit")
#             await call.answer()
#         else:
#             result = await utils.get_day(group, utils.weeknum_to_weekday(int(new_day)))
#             try:
#                 await call.message.edit_text(result, reply_markup=kb.day_switch_kb(int(new_day)))
#             except:
#                 logging.warning("same text, didn't edit")
#             await call.answer()
