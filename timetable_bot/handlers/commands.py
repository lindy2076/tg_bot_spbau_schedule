import asyncio
from aiogram import types, Router, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from datetime import timedelta

import timetable_bot.keyboards as kb
import timetable_bot.utils as utils
from timetable_bot.config import DefaultSettings
from timetable_bot.schemas import TextResponse
from .states import SearchProfessor


config = DefaultSettings()
TD = timedelta(hours=config.TIMEZONE_OFFSET)
main_router = Router(name="main_router")


@main_router.message(Command('start'))
async def send_hello(message: types.Message):
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏.
    """
    await message.reply(TextResponse.greet(message.from_user.first_name),
                        reply_markup=kb.smile_kb)
    await message.answer(TextResponse.SEE_MENU, reply_markup=kb.group_sel_kb)


@main_router.message(Command('week'))
async def send_week_schedule(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã —é–∑–µ—Ä–∞
    """
    group = await utils.get_user_group(message.from_user.id)
    result = utils.get_week(group)
    await message.reply(result, reply_markup=kb.day_sel_kb)


@main_router.message(Command('day'))
async def select_day(message: types.Message):
    """
    –í—ã–¥–∞—ë—Ç –∫–ª–∞–≤—É —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /day –∏–ª–∏ callback menu
    """
    await message.reply(TextResponse.CHOOSE_DAY, reply_markup=kb.day_sel_kb)


@main_router.message(Command('now'))
async def get_current_class(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ (–∏–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–¥—ë—Ç)
    """
    group = await utils.get_user_group(message.from_user.id)
    result = utils.get_current_class(group, message.date + TD)
    await message.reply(result, reply_markup=kb.smile_kb)


@main_router.message(Command('next'))
async def get_next_class(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ
    """
    group = await utils.get_user_group(message.from_user.id)
    result = utils.get_next_class(group, message.date + TD)
    await message.reply(result, reply_markup=kb.smile_kb)


def get_weekday_for_group(user_group, user_datetime):
    """
    –ú–µ—Ç–æ–¥ —Ö–µ–ª–ø–µ—Ä –¥–ª—è get_today_schedule
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å (user_datetime)
    –∞ —Ç–∞–∫–∂–µ —Å–∞–º –¥–µ–Ω—å.
    """
    result = utils.get_today(user_group, user_datetime)
    today = utils.weekday_from_date(user_datetime)
    return result, today


@main_router.message(Command('today'))
async def get_today_schedule(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å –∏–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
    """
    group = await utils.get_user_group(message.from_user.id)
    result, today = get_weekday_for_group(group, message.date + TD)
    reply_kb = None
    if group:
        reply_kb = kb.day_switch_kb(utils.weekday_to_weeknum(today))
    await message.reply(result, reply_markup=reply_kb)


@main_router.message(Command('tomorrow'))
async def get_tomorrow_schedule(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Å –∏–Ω–ª–∞–π–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–º –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏.
    """
    group = await utils.get_user_group(message.from_user.id)
    result, today = get_weekday_for_group(
        group, message.date + timedelta(hours=24) + TD
    )
    reply_kb = None
    if group:
        reply_kb = kb.day_switch_kb(utils.weekday_to_weeknum(today))
    await message.reply(result, reply_markup=reply_kb)


@main_router.message(Command('setgr'))
async def set_user_group(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    """
    await message.reply(
        TextResponse.CHOOSE_GROUP2, reply_markup=kb.group_sel_kb
    )


@main_router.message(Command('me'))
@main_router.message(Command('help'))
async def get_user_group(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥—Ä—É–ø–ø–æ–π —é–∑–µ—Ä–∞ + —Ö—Ä–∞–Ω—è—â—É—é—é—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    + —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–æ—Ç–∞ + —á–µ—Ç–Ω–æ—Å—Ç—å –Ω–µ–¥–µ–ª–∏
    """
    result = await utils.get_user_group_message(
        message.from_user.id, message.date + TD
    )
    await message.reply(result, link_preview_options=types.LinkPreviewOptions(is_disabled=True))


@main_router.message(Command('del'))
async def del_me_from_db(message: types.Message):
    """
    –£–¥–∞–ª—è–µ—Ç —é–∑–µ—Ä–∞ –∏–∑ –±–¥
    """
    result = await utils.del_user_from_db(message.from_user.id)
    await message.reply(result)


@main_router.message(Command('pdf'))
async def serve_pdf(message: types.Message, bot: Bot):
    file_id, err = utils.get_pdf_id()
    if err is not None:
        await message.reply(err, reply_markup=kb.smile_kb)
        return
    await bot.send_document(message.chat.id, file_id,
                            reply_markup=kb.select_degree_pdf,
                            caption=TextResponse.THIS_IS_BACH_SCHEDULE)


@main_router.message(Command('faculty'))
async def send_faculty_info(message: types.Message):
    group = await utils.get_user_group(message.from_user.id)
    if group is None:
        await set_user_group(message)
        return
    user_profs = utils.get_user_profs_resp(group)
    await message.answer(user_profs, reply_markup=kb.faculty_kb1())


@main_router.message(SearchProfessor.search)
async def handle_search_professor(message: types.Message, state: FSMContext):
    """
    –í—ã—Ç–∞—â–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ –ø—Ä–µ–ø–æ–¥–æ–≤...
    """
    if not message.text:
        await message.reply(TextResponse.MSG_IS_NOT_TEXT)
        return
    result, err = utils.search_profs_by_keywords(message.text)
    if err is not None:
        await message.reply(err + "\n–¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–∏—Å–∫–∞ /cancel")
        return
    await message.reply(result, reply_markup=kb.faculty_kb1("allnow", after_search=True))
    await state.clear()


@main_router.message(F.text)
async def send_echo(message: types.Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥ –æ—Ç —é–∑–µ—Ä–∞
    (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å reply –∫–ª–∞–≤—ã smile_kb)
    """
    match message.text:
        case "—á—Ç–æ —â–∞—Å":
            await get_current_class(message)
        case "next –ø–∞—Ä–∞":
            await get_next_class(message)
        case "—á—Ç–æ —Å—ë–¥–Ω—è":
            await get_today_schedule(message)
        case "—á—Ç–æ –∑–∞–≤—Ç—Ä–∞":
            await get_tomorrow_schedule(message)
        case "–≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É":
            await set_user_group(message)
        case "–Ω–µ–¥–µ–ª—è":
            await send_week_schedule(message)
        case "–ø—Ä–µ–ø–æ–¥—ã":
            await send_faculty_info(message)
        case "ü§† help":
            await get_user_group(message)
        case "pdf":
            await serve_pdf(message, bot)
        case _:
            await message.reply(
                TextResponse.echo_and_dayselect(
                    message.from_user.first_name,
                    message.text
                ),
                reply_markup=kb.day_sel_kb
            )


@main_router.message(F.sticker)
async def manage_nonmsg(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞.
    """
    await message.answer_sticker(sticker=TextResponse.SPECIAL_STICKER_FILE_ID)
