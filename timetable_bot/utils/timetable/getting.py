import json 
import datetime
from typing import Tuple

from timetable_bot.schemas import Degree, Week, User
from timetable_bot.schemas import Degrees, Groups, DayTitles, ErrorMessages
from timetable_bot.db.models import User as DbUser
from timetable_bot.db.connection import get_session
from .time import weekday_from_date, get_curr_time, get_class_ends_time

from pydantic import ValidationError

from sqlalchemy import delete, select


def get_degree(user_group: Groups) -> Degrees:  # –∑–∞—á–µ–º..? —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ depricated
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å —á–µ–ª–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –≥—Ä—É–ø–ø—ã (–±–∞–∫, –º–∞–≥, –∞—Å–ø, null)
    """
    if not user_group:
        return Degrees.null
    if user_group[0] <= "4":
        return Degrees.bach
    if user_group[0] in ["5", "6"]:
        return Degrees.mag
    return Degrees.null


async def load_week_from_file(user_group: Groups) -> Tuple[list[Week], ErrorMessages | None]:
    """
    –ì—Ä—É–∑–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã user_group –∏ –≤—ã–¥–∞—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é.
    –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –∏–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Ç–æ –≤–µ—Ä–Ω—ë—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é
    –æ—à–∏–±–∫—É –≤—Ç–æ—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, –∏–Ω–∞—á–µ None.
    """
    degree = get_degree(user_group)
    if degree == Degrees.null:
        return None, ErrorMessages.NO_GROUP

    filename = "schedule_json/" + user_group + ".json"
    try:
        with open(filename) as wsc:
            loaded = json.load(wsc)
    except:
        return None, ErrorMessages.NO_SCHEDULE

    res = Degree(**loaded)
    return getattr(res, "activities"), None


async def get_week(user_group: Groups) -> str:
    """
    –î–∞—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –≤ –≥–æ—Ç–æ–≤–æ–º –≤–∏–¥–µ.
    """
    week_activities, err = await load_week_from_file(user_group)
    if err is not None:
        return err

    for _group in week_activities:   # —á–∑—Ö 
        if _group.group != user_group:
            continue
        activities = [" " + repr(x) + "\n" for x in _group.week_activities]   # FIXME –∫–∞–∫-—Ç–æ –≤ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
        return " ".join(activities)
    return "–ø–æ–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç..."


async def get_day(user_group: Groups, user_day: DayTitles) -> str:  # FIXME –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ for else
    """
    –î–∞—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    """
    bach_activities, err = await load_week_from_file(user_group)
    if err is not None:
        return err

    for _group in bach_activities:
        if _group.group == user_group:
            break
    else:
        return "–ø–æ–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç..."
    
    for activity in _group.week_activities:
        if activity.title == user_day:
            break
    else:
        return "–Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç..."
    activities = ["    " + repr(x) + "\n" for x in activity.activities]

    return user_day + ":\n\n " + " ".join(activities)


async def get_today(user_group: Groups, user_datetime: datetime.datetime) -> str:
    """
    –î–∞—ë—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã.
    """
    bach_activities, err = await load_week_from_file(user_group)
    if err is not None:
        return err
    
    for _group in bach_activities:
        if _group.group == user_group:
            break
    else:
        return "–ø–æ–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç..."

    user_day = weekday_from_date(user_datetime)
    for activity in _group.week_activities:
        if activity.title == user_day:
            break
    else:
        return "–Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç..."
    activities = ["    " + repr(x) + "\n" for x in activity.activities]

    return user_day + ":\n\n " + " ".join(activities)


async def get_current_class(user_group: Groups, user_datetime: datetime.datetime) -> str:
    """
    –î–∞—ë—Ç —Ç–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–ª–∏ –±—É–¥—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """
    bach_activities, err = await load_week_from_file(user_group)
    if err is not None:
        return err

    for _group in bach_activities:
        if _group.group == user_group:
            break
    else:
        return "–ø–æ–∫–∞ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç..."

    user_day = weekday_from_date(user_datetime)
    for day in _group.week_activities:
        if day.title == user_day:
            break
    else:
        return "–ù–ò–ß–ï–ì–û!!! –°–í–û–ë–û–î–ê!!!"

    curr_time = get_curr_time(user_datetime)
    for _class in day.activities:
        class_time = _class.starts
        class_ends = get_class_ends_time(_class.starts, _class.lasts)
        if class_time < curr_time and curr_time < class_ends:
            return "—Å–µ–π—á–∞—Å –∏–¥—ë—Ç " + _class.name + " –≤ " + _class.auditory
        if curr_time < class_time:
            return "—Å–µ–π—á–∞—Å –±—É–¥–µ—Ç " + _class.name + " –≤ " + class_time + " –≤ " + _class.auditory
    return "–∫–∞–∂–µ—Ç—Å—è –Ω–∏—á–µ–≥–æ –Ω–µ –∏–¥—ë—Ç..."


async def set_user_group(tg_user, message: str) -> str:  #FIXME –æ–ø–∏—Å–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É message –≤ –∫–æ–º–º–µ–Ω—Ç–µ
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è —é–∑–µ—Ä–∞
    """
    try:
        group = message.split(":")[1]
    except IndexError:
        return "–≤–æ—Ç –µ—Ç–æ –¥–∞... –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∫–∞–∫ —Ç—ã –µ—Ç–æ —Å–¥–µ–ª–∞–ª... –Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É –∞–≤—Ç–æ—Ä—É!"

    try:
        validated = User(id=tg_user.id, group=group)
    except ValidationError:
        return "—Ç–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç.. –Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É –∞–≤—Ç–æ—Ä—É!"

    session = await get_session()
    user_str = str(tg_user.id) 
    query = select(DbUser).where(DbUser.tg_id == user_str)
    user_db = await session.scalar(query)
    if not user_db:
        new_user = DbUser(
            tg_id=user_str, 
            username=tg_user.first_name,
            group=validated.group
        )
        session.add(new_user)
    else:
        if user_db.group == validated.group:
            await session.close()
            return "–∫–∞–∂–µ—Ç—Å—è —Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–ª —ç—Ç—É –≥—Ä—É–ø–ø—É..."
        user_db.group = validated.group
        session.add(user_db)
    await session.commit()
    await session.close()
    return "—Ç–µ–ø–µ—Ä—å " + validated.group + " - –≤–∞—à–∞ –≥—Ä—É–ø–ø–∞"


async def get_user_group_message(user_id: int) -> str:
    """
    –°–º–µ—à–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –Ω–æ–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–º —á—Ç–æ —Ö—Ä–∞–Ω–∏—Ç –±–æ—Ç.
    """
    group = await get_user_group(user_id)
    if not group:
        return "–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –æ —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞—é. –ø–æ–ø—Ä–æ–±—É–π /setgr *–Ω–æ–º–µ—Ä_–≥—Ä—É–ø–ø—ã*"
    return "—è –≤—ã–¥–∞—é –¥–ª—è —Ç–µ–±—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –Ω–æ–º–µ—Ä " + group + \
    "\n\n—è —Ö—Ä–∞–Ω—é —Ç–æ–ª—å–∫–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –∏–º–µ–Ω–Ω–æ: " + \
    "–∞–π–¥–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –∏–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, –≤—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è, –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, –≤—Ä–µ–º—è –æ–Ω–ª–∞–π–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, —Ñ–∞–º–∏–ª–∏—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –≤–∞—à—É –ø–ª–∞—Ç—ë–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" +\
    "—à—É—á—ÉüòÅ. —è —Ö—Ä–∞–Ω—é —Ç–æ–ª—å–∫–æ –≤–∞—à —Ç–≥ –∞–π–¥–∏, —Ç–≥ –∏–º—è, –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏ –≤—Ä–µ–º—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–æ—Ç—É. —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø–∏—à–∏—Ç–µ /del"


async def get_user_group(user_id: int) -> Groups | None:
    """
    –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—É —é–∑–µ—Ä–∞ –∏–∑ –±–∞–∑—ã –ø–æ —Ç–≥ –∞–π–¥–∏.
    """
    session = await get_session()
    query = select(DbUser).where(DbUser.tg_id == str(user_id))
    user_db = await session.scalar(query)
    await session.close()
    if not user_db:
        return None
    return user_db.group


async def del_user_from_db(user_id: int) -> str:
    """
    –£–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –∏–∑ –¥–± –ø–æ —Ç–≥ –∞–π–¥–∏.
    """
    session = await get_session()
    query = delete(DbUser).where(DbUser.tg_id == str(user_id))
    await session.execute(query)
    await session.commit()
    await session.close()
    return "—Ç–µ–±—è –±–æ–ª—å—à–µ (–∞ –º–æ–∂–µ—Ç –∏ –Ω–µ –±–æ–ª—å—à–µ) –Ω–µ—Ç –≤ –º–æ–µ–π –±–¥. (–Ω–æ –≤ –ª–æ–≥–∞—Ö –µ—Å—Ç—åüôÉ )"
